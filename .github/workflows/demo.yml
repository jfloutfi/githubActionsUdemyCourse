name: Deploy website

on:
  push:
    branches:
      - main

defaults:
  run:
    working-directory: starting-project-01-02

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish_id.outputs.script-file }} # steps is a special context variable, we can access step related data using it, the best way would be to give that step an "id". Referencing the output here set this to be the output of the overall job. "script-file:" is not a reserved keyword, it is up to us to name it. We can also add multiple output
    steps:
      - name: Get code
        uses: actions/checkout@v4
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: publish js file name
        id: publish_id # the step id
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >> $GITHUB_OUTPUT ';' # {} special place holder, will hold the name of the .js files. We stream the output ">>" to the special env variable variable: $GITHUB_OUTPUT
      - name: upload artificat
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          # the output of "run build" in stored in the ./dist folder
          # based the build command create by the user
          path: |
            ./starting-project-01-02/dist
            ./starting-project-01-02/package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      # when the base dir is not the working dir, you will need to checkout in every job
      # each job is a new canavs
      - name: Get code
        uses: actions/checkout@v4
      - name: get build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-files
      - name: output content
        run: ls ../
      - name: output file name
        run: echo "${{ needs.build.outputs.script-file }}"
      - name: Deploy
        run: echo "Deploying..."
